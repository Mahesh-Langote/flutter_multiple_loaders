on:
  push:
    branches: [ main ]

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3'
          channel: 'stable'
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Format code
        run: dart format --set-exit-if-changed .
      
      - name: Analyze code
        run: flutter analyze
      
      - name: Run tests
        run: flutter test

  publish-package:
    name: Publish to pub.dev
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3'
          channel: 'stable'
      
      - name: Install dependencies
        run: flutter pub get
        
      - name: Check if version was updated
        id: check_version
        run: |
          git fetch origin main
          # Get the current commit hash
          CURRENT_COMMIT=$(git rev-parse HEAD)
          # Get the previous commit hash
          PREV_COMMIT=$(git rev-parse HEAD^)
          # Check if this is the first commit in the repo
          if git rev-parse HEAD^ >/dev/null 2>&1; then
            PREV_VERSION=$(git show $PREV_COMMIT:pubspec.yaml 2>/dev/null | grep -Po '(?<=^version: ).+$' || echo "0.0.0")
            CURRENT_VERSION=$(grep -Po '(?<=^version: ).+$' pubspec.yaml)
            if [ "$PREV_VERSION" != "$CURRENT_VERSION" ]; then
              echo "Version changed from $PREV_VERSION to $CURRENT_VERSION"
              echo "version_changed=true" >> $GITHUB_OUTPUT
            else
              echo "Version unchanged ($CURRENT_VERSION)"
              echo "version_changed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "First commit in repository, publishing initial version"
            echo "version_changed=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Setup Pub Credentials
        if: steps.check_version.outputs.version_changed == 'true'
        run: |
          mkdir -p $HOME/.pub-cache
          echo '${{ secrets.PUB_CREDENTIALS }}' > $HOME/.pub-cache/credentials.json
      
      - name: Check Publish Requirements
        if: steps.check_version.outputs.version_changed == 'true'
        run: flutter pub publish --dry-run
      
      - name: Publish Package
        if: steps.check_version.outputs.version_changed == 'true'
        run: flutter pub publish